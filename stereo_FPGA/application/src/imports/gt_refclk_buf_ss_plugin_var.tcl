    # subsystem local structure to store available config: format [odd==Config even==value] \    # e.g ss_router param list is          [list CONFIG.NUM_SI <> CONFIG.NUM_MI <>]    variable ss_xgui_varlist [list]        # GLOBAL VAR DECLARATION AND ASSIGNMENT    # variable var_c_max_bits_per_component   [list]    # variable var_c_input_pixels_per_clock   [list]
    # variable var_exdes_topology             [list]            # CONSOLE DEBUG MESSAGE PRINTING ENABLEMENT    variable var_debug_en [list]    set var_debug_en      0        # EXDES PORTS INFORMATION CONTAINER    variable vary_attr_pinlist [list]    variable pin_cmd    array set pin_cmd {        IBUFDSGT_OUT         {-dir O}
        IBUFDSGT_ODIV2_OUT   {-dir O}        IBUFDSGT_IN          {-mode slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0}    }    # FOR PORT CONFIGURABILITY     # example declaration    # variable config_port_s_axi_cpu_aclk    # array set config_port_s_axi_cpu_aclk {    #   CONFIG.ASSOCIATED_BUSIF         {S_AXI_CPU_IN}    #   CONFIG.ASSOCIATED_RESET         {s_axi_cpu_aresetn}    # }    # ** not applicable for hier         ## VAR TO KEEP BLOCK NAME WITH GENERATION CMD \        new (HIP): when define block_cmd's block name, do exclude any numbering for permutated blocks \        example: for xlslice_<1/2/3/...>, define it as xlslice_            ## bmak: rtl ref module gen flow is required for rtl - NEW    ## bmak: hier gen flow is required for wrapper - NEW        variable block_cmd     array set block_cmd {        bufg_gt              {-type ip -vlnv xilinx.com:ip:util_ds_buf}        ibufdsgte            {-type ip -vlnv xilinx.com:ip:util_ds_buf}
        vcc_const            {-type ip -vlnv xilinx.com:ip:xlconstant}    }                                           # FOR BLOCK CONFIGURABILITY     # example coding     # variable config_util_vector_logic     # array set config_util_vector_logic {    #   CONFIG.C_SIZE       {1}    #   CONFIG.C_OPERATION  {$C_OPERATION}    # }        variable config_bufg_gt    variable config_ibufdsgte
    variable config_vcc_const    if {[array exist config_bufg_gt]} {        array unset config_bufg_gt    }    array set config_bufg_gt {        CONFIG.C_BUF_TYPE {BUFG_GT}
    }    if {[array exist config_ibufdsgte]} {        array unset config_ibufdsgte    }    array set config_ibufdsgte {        CONFIG.C_BUF_TYPE {IBUFDSGTE}
    }    if {[array exist config_vcc_const]} {
        array unset config_vcc_const
    }
    array set config_vcc_const {        CONFIG.CONST_VAL  {1}
    }    ## UPDATE_BD - NEW 25Nov2014 - needed for HIP     ## VARS TO CONFIGURE THE AXI-LITE ADDR MAPPING     ## assumption: top has only 1 axi-lite interconnect to control all the axi-lite traffic within the HIP      ## pending development: multilevel HIP use case that involve child HIP    # variable top_addr_axi_lite_space NA    # variable top_addr_axi_mm_space NA    # variable cur_addr_space NA    # variable addr_reg_index 0    # variable addr_reg_index_axi_mm 20    # variable config_addr_mapping_axi_lite    # variable config_addr_mapping_axi_mm        
